{"version":3,"sources":["components/NavBar/Crab.png","components/Footer/Footer.js","components/Card/card.js","components/JumboGreeting/JumboGreeting.js","components/NavBar/NavBar.js","components/MainArea/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Footer","props","react_default","a","createElement","class","href","Card","state","clicked","this","console","log","onClick","handleClick","id","aria-label","src","image","alt","name","fact","Component","Jumbo","message","NavBar","brandLogo","type","score","topScore","mainGame","creaturesData","shuffleData","newArr","sort","Math","random","clickListener","_this","setState","_this2","NavBar_NavBar","JumboGreeting","map","creature","card","key","link","App","className","main","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.381354b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Crab.dd5f05be.png\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n\r\n    return (\r\n    <div>\r\n        <footer class=\"page-footer font-small blue fixed-bottom\">\r\n            <div class=\"footer-copyright text-center py-3\">Â© 2018 Copyright:\r\n                <a href=\"https://circuitsyn.github.com/\"> CreatureRecall.com</a>\r\n            </div>\r\n        </footer>\r\n    </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport \"./style.css\";\r\n\r\nclass Card extends Component {\r\n    state = {\r\n        clicked: false\r\n    };\r\n\r\n    render() {\r\n        let props = this.props;\r\n        console.log(this.props);\r\n    return (\r\n        <div onClick={() => props.handleClick(props.id)} aria-label=\"click item\" class=\"card col-12 col-sm-2 col-md-2 col-lg-2 col-xl-2 m-3\">\r\n            <img class=\"card-img-top cardImg\" src={props.image} alt=\"Card image cap\" />\r\n            <div class=\"card-body\">\r\n                <h5 class=\"card-title\"><strong>Name: </strong> {props.name}</h5>\r\n                <h6><strong>Class: </strong>{props.class}</h6>\r\n                <p class=\"card-text\"><strong>Fun Fact: </strong>{props.fact}</p>\r\n                {/* <a href={props.link} target=\"_blank\" class=\"btn btn-primary\">Learn more!</a> */}\r\n            </div>\r\n        </div>\r\n    \r\n       \r\n    );\r\n} \r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbo(props) {\r\n\r\n    return (\r\n    <div>\r\n        <div class=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4\">Creature Recall</h1>\r\n                <p class=\"lead\">Try for a high score. All you need to do is click on each unique creature without repeating. Can you click them all without making a mistake? Lets see!</p>\r\n                <p class=\"lead\"><em>{props.message}</em></p>\r\n            </div>\r\n        </div>\r\n    </div>    \r\n    );\r\n}\r\n\r\nexport default Jumbo;\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport brandLogo from \"./Crab.png\";\r\n\r\nfunction NavBar(props) {\r\n    \r\n    return (\r\n    <div>\r\n        <nav class=\"navbar navbar-light bg-light fixed-top\">\r\n            <a class=\"navbar-brand font-weight-bolder\" href=\"/\">\r\n            <img class=\"brandLogo mr-2\" src={brandLogo} alt=\"nav bar brand logo crab image\" />\r\n            Creature Recall\r\n            </a>\r\n\r\n            <div class=\"float-right d-flex justify-content-end\">\r\n                <h3 class=\"ml-2 mr-2\">Score: </h3>\r\n                <button type=\"button\" class=\"btn btn-primary ml-2 mr-2 font-weight-bolder\">{props.score}</button>\r\n                <h3 class=\"ml-2 mr-2\">|</h3>\r\n                <h3 class=\"ml-2 mr-2\">Top Score: </h3>\r\n                <button type=\"button\" class=\"btn btn-primary ml-2 mr-2 font-weight-bolder\">{props.topScore}</button>\r\n            </div>\r\n            \r\n        </nav>\r\n    </div>    \r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from \"react\";\r\nimport Card from \"../Card/card\";\r\nimport creaturesData from \"../../creatures.json\";\r\nimport Jumbo from '../JumboGreeting/JumboGreeting';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport \"./style.css\";\r\n\r\nclass mainGame extends Component {\r\n\r\n    state = {\r\n        creaturesData,\r\n        score: 0,\r\n        topScore: 0,\r\n        message: \"Start by clicking any of the images below!\"\r\n    };\r\n\r\n    //upon page load run the shuffle function\r\n    componentDidMount() {\r\n        this.setState({ creaturesData: this.shuffleData(this.state.creaturesData)})\r\n    }\r\n\r\n    //function to shuffle data\r\n    shuffleData = () => {\r\n        let newArr = creaturesData.sort(function(){return 0.5 - Math.random()}); \r\n        console.log(\"I'm shuffled!\")\r\n        console.log(\"newArr: \", newArr);\r\n        return newArr;\r\n    }\r\n\r\n    clickListener = () => {\r\n        this.setState({creaturesData: this.shuffleData(this.state.creaturesData)});\r\n    }\r\n    \r\n    \r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            <NavBar score={this.state.score} topScore={this.state.topScore} />\r\n            <Jumbo message={this.state.message}/>\r\n            <div class=\"container-fluid\">\r\n                <div class=\"row d-flex justify-content-center\">\r\n                    {this.state.creaturesData.map(creature =>\r\n                    <Card handleClick={this.clickListener} key={creature.id} name={creature.name} image={creature.image} class={creature.class} fact={creature.fact} link={creature.link} />)}\r\n                </div>    \r\n            </div>  \r\n        </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default mainGame;\r\n","import React from 'react';\nimport './App.css';\n\n\nimport Footer from './components/Footer/Footer';\nimport MainGame from './components/MainArea/main';\n\nfunction App(props) {\n  \n    return (\n      <div className=\"appSite\">\n        \n          <div className=\"main\">\n          \n          <MainGame />\n          </div>\n        \n        <Footer />\n      </div>  \n      \n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport '../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}